
from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup
from sqlalchemy import select

from database.db import async_session
from database.models import User
from logger import app_logger
from states.add_admin import AddAdmin
from utils.keyboards import back_button

router = Router()

kb = InlineKeyboardMarkup(inline_keyboard=[*back_button('back_to_main')])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
@router.callback_query(lambda c: c.data == "add_admin_instruction")
async def ask_for_username(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AddAdmin.waiting_for_username)
    if callback.message:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: @ivanov)", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username
@router.message(StateFilter(AddAdmin.waiting_for_username))
async def process_username(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=kb)
        return

    raw_username = message.text.strip()

    if raw_username.startswith("@"):
        raw_username = raw_username[1:]

    if not raw_username:
        await message.answer("‚ö†Ô∏è Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=kb)
        return

    async with async_session() as session:
        stmt = select(User).where(User.username.ilike(raw_username))
        result = await session.execute(stmt)
        user: User | None = result.scalar_one_or_none()

        if user is None:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username `{raw_username}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.",
                parse_mode="HTML", reply_markup=kb
            )
        elif bool(user.is_admin):
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.", reply_markup=kb)
        else:
            user.is_admin = True
            await session.commit()
            app_logger.info(f"üîê –î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω: {user.telegram_id} | @{user.username or '-'} ‚Äî –¥–æ–±–∞–≤–∏–ª: {message.from_user.id} | @{message.from_user.username or '-'}") # type:ignore
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!",
                parse_mode="HTML", reply_markup=kb
            )

    await state.clear()

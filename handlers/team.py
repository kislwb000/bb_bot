from aiogram import Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from sqlalchemy import select

from database.db import async_session
from database.models import Event, Team
from logger import app_logger
from states.team import TeamStates
from utils.keyboards import add_more, back_button, back_menu_button

router = Router()

# üîò –ö–æ–º–∞–Ω–¥–∞: /add_team
@router.message(Command("add_team"))
async def add_team_command(message: Message, state: FSMContext):
    async with async_session() as session:
        stmt = select(Event).order_by(Event.created_at.desc())
        result = await session.execute(stmt)
        events = result.scalars().all()

    kb2 = InlineKeyboardMarkup(inline_keyboard=[*back_button('back_to_main')])

    if not events:
        await message.answer("‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—É–±–±–æ—Ç–Ω–∏–∫–∞.", reply_markup=kb2)
        return

    # üëá –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å data=event:<id>
    buttons = [
        *[[InlineKeyboardButton(text=event.title, callback_data=f"event:{event.id}")]
        for event in events],
        *back_button('back_to_main')
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–±–±–æ—Ç–Ω–∏–∫, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=kb
    )
    await state.set_state(TeamStates.waiting_for_event_title)


# üîÅ Callback –∏–∑ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É" –≤ start.py
@router.callback_query(lambda c: c.data == "add_team")
async def handle_add_team_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await add_team_command(callback.message, state)  # type: ignore


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–±–±–æ—Ç–Ω–∏–∫–∞ (event:<id>)
@router.callback_query(StateFilter(TeamStates.waiting_for_event_title), lambda c: c.data and c.data.startswith("event:"))
async def process_event_choice(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        event_id = int(callback.data.split(":")[1])  # type: ignore
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–±–±–æ—Ç–Ω–∏–∫.") # type: ignore
        return

    await state.update_data(event_id=event_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[*back_button('add_team')])) # type: ignore
    await state.set_state(TeamStates.waiting_for_team_name)


# üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
@router.message(StateFilter(TeamStates.waiting_for_team_name))
async def process_team_name(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    data = await state.get_data()
    event_id = data.get("event_id")
    team_name = message.text.strip()

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–±–±–æ—Ç–Ω–∏–∫–∞
        stmt = select(Event).where(Event.id == event_id)
        result = await session.execute(stmt)
        event = result.scalar_one_or_none()

        if not event:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É–±–±–æ—Ç–Ω–∏–∫.")
            await state.clear()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        new_team = Team(name=team_name, event_id=event_id)
        session.add(new_team)
        await session.commit()
        app_logger.info(f"üë• –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: '{team_name}' ‚Üí –°—É–±–±–æ—Ç–Ω–∏–∫: '{event.title}' (ID {event.id})")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        *add_more('add_team'),
        *back_menu_button()
    ])

    await message.answer(
        f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>{team_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å—É–±–±–æ—Ç–Ω–∏–∫—É <b>{event.title}</b>.",
        parse_mode="HTML", reply_markup=kb
    )
    await state.clear()


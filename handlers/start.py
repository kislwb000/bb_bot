import os

from aiogram import Router, types
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select

from database.db import async_session
from database.models import User
from logger import app_logger
from utils.keyboards import back_menu_button, main_menu_kb

router = Router()

@router.message(Command('start'))
async def start_cmd(message: types.Message):
    user = message.from_user

    if user is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == user.id)
        result = await session.execute(stmt)
        db_user = result.scalar_one_or_none()

        admin_ids = [int(i.strip()) for i in os.getenv("ADMIN_IDS", "").split(",") if i.strip().isdigit()]
        is_admin = user.id in admin_ids

        if db_user is None:
            db_user = User(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                is_admin=is_admin
            )
            session.add(db_user)
            await session.commit()
            app_logger.info(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} | @{user.username or '-'} | is_admin=False")
        else:
            is_admin = bool(db_user.is_admin)

        # –ï—â—ë —Ä–∞–∑: db_user —É–∂–µ —Ç–æ—á–Ω–æ –Ω–µ None, –ø—Ä–æ–≤–µ—Ä—è–µ–º is_admin
        if db_user.is_admin is not True:
            await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
            app_logger.info(f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –æ–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user.id} | @{user.username or '-'}")
            return


        # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        kb = main_menu_kb()

    try:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëã\n–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
            reply_markup=kb
        )
        app_logger.info(f"‚úÖ –ê–¥–º–∏–Ω –∑–∞—à—ë–ª –≤ –±–æ—Ç–∞: {user.id} | @{user.username or '-'}")
    except TelegramForbiddenError:
        app_logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")


@router.callback_query(lambda c: c.data == "view_database")
async def handle_view_database(callback: CallbackQuery):
    await callback.answer()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç", callback_data="view_report")],
        [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel")],
        [InlineKeyboardButton(text="üìã –í—Å–µ —Å—É–±–±–æ—Ç–Ω–∏–∫–∏", callback_data="view_events")],
        [InlineKeyboardButton(text="üë• –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="view_teams")],
        *back_menu_button()
    ])

    try:
        await callback.message.edit_text("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=kb) # type: ignore
    except Exception:
        await callback.message.delete() # type: ignore
        await callback.message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=kb) # type: ignore

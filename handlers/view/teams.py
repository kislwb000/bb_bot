from aiogram import Router, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from database.db import async_session
from database.models import Team
from utils.keyboards import back_button

router = Router()
ITEMS_PER_PAGE = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


def get_teams_kb(
    page: int, total_pages: int, callback_base: str = "view_teams"
) -> InlineKeyboardMarkup:
    buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{callback_base}:{page - 1}"
            )
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"{callback_base}:{page + 1}"
            )
        )
    if nav_buttons:
        buttons.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
    buttons.extend(back_button("view_database"))

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(lambda c: c.data.startswith("view_teams"))
async def handle_view_teams(callback: types.CallbackQuery):
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    try:
        page = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        page = 1

    async with async_session() as session:
        stmt = select(Team).options(selectinload(Team.event)).order_by(Team.event_id)
        result = await session.execute(stmt)
        teams = result.scalars().all()

    if not teams:
        await callback.message.answer(
            "üì≠ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç.", reply_markup=back_button("view_database")[0]
        )  # type: ignore
        return

    total_pages = (len(teams) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    start = (page - 1) * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    teams_page = teams[start:end]

    text = f"<b>üë• –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    for team in teams_page:
        event_title = team.event.title if team.event else "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—É–±–±–æ—Ç–Ω–∏–∫"
        text += f"‚Ä¢ <b>{team.name}</b> ‚Äî <i>{event_title}</i>\n"

    kb = get_teams_kb(page, total_pages)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
